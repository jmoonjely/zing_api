<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <munit:config doc:name="Munit configuration" mock-connectors="false" mock-inbounds="false"/>    
    <spring:beans>
	<spring:import resource="classpath:api.xml" />
	<spring:import resource="classpath:global/global_exception_handling.xml" />
	<spring:import resource="classpath:global/shared_http_statuscode.xml" />
	<spring:import resource="classpath:global/shared_resources.xml" />
	
	<spring:import resource="classpath:subflows/pushToCustomerQueue.xml" />
	<spring:import resource="classpath:subflows/putcustomer.xml" />
	<spring:import resource="classpath:subflows/getcustomer.xml" />
	<spring:import resource="classpath:subflows/listcustomers.xml" />
	<spring:import resource="classpath:subflows/patchcustomer.xml" />
	<spring:import resource="classpath:subflows/postcustomer.xml" />
	<spring:import resource="classpath:subflows/deletecustomer.xml" />
</spring:beans>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="api" doc:name="HTTP Request Configuration"/>
   
    <munit:test name="api-test-delete" description="To test the delete customer">
        <http:request config-ref="HTTP_Request_Configuration" path="v1/customers/c0001" method="DELETE" doc:name="HTTP"/>
        <munit:assert-on-equals message="The HTTP Status code is not correct!" expectedValue="#[200]" actualValue="#[message.inboundProperties['http.status']]" doc:name="Assert Equals"/>
        <!-- More assertions based on payload and negative scenarions can be tested --> 
    </munit:test>  
   
   <!-- ********** 
                    More tests should be added for all the flows. 
                    Ideally a TDD approach can be taken here for developing the flows 
                    to make flows short and clear and follow the SINGLE responsibility principle.
                                                                                                 ************* --> 
   
   
   <!--  <munit:test name="api-test-get" description="To test the get customer">
        <munit:set payload="#['']" doc:name="Set Message"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/v1/customers/c0001" method="GET" doc:name="HTTP"/>
        <munit:assert-on-equals message="The HTTP Status code is not correct!" expectedValue="#[200]" actualValue="#[message.inboundProperties['http.status']]" doc:name="Assert Equals"/>
        <munit:assert-payload-equals message="The response payload is not correct!" expectedValue="{}" doc:name="Assert Payload"/>
    </munit:test>
    <munit:test name="api-test-post" description="To test the create customer">
        <munit:set payload="#['']" doc:name="Set Message"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/v1/customers" method="POST" doc:name="HTTP"/>
        <munit:assert-on-equals message="The HTTP Status code is not correct!" expectedValue="#[201]" actualValue="#[message.inboundProperties['http.status']]" doc:name="Assert Equals"/>
        <munit:assert-payload-equals message="The response payload is not correct!" expectedValue="{}" doc:name="Assert Payload"/>
    </munit:test> 
    <munit:test name="api-test-put" description="To test the put customer">
        <munit:set payload="{id:c11,firstName:testF}" doc:name="Set Message"/>
        <http:request config-ref="HTTP_Request_Configuration" path="v1/customers/c0001" method="PUT" doc:name="HTTP"/>
        <munit:assert-on-equals message="The HTTP Status code is not correct!" expectedValue="#[201]" actualValue="#[message.inboundProperties['http.status']]" doc:name="Assert Equals"/>
        <munit:assert-payload-equals message="The response payload is not correct!" expectedValue="{}" doc:name="Assert Payload"/>
    </munit:test>-->
     
</mule>
